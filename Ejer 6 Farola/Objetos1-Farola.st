Object subclass: #Farola	instanceVariableNames: 'estado vecinos'	classVariableNames: ''	package: 'Objetos1-Farola'!!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:38'!turnOn	"Si la farola no está encendida, la enciende y propaga la acción."	self isOn		ifFalse: [ estado := true.			self propagarEncender]! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:21'!initialize	vecinos:= OrderedCollection new.	estado := false.! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:21'!neighbors"Retorna sus farolas vecinas"^vecinos ! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:38'!propagarEncender	"Enciende o apaga todas las farolas vecinas"	self neighbors do: [ :f | f turnOn ] ! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:24'!isOn"Retorna true si la farola está encendida."	^ estado! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:36'!propagarApagar	"Apaga todas las farolas vecinas"	self neighbors do: [ :f | f turnOff ]! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:34'!turnOff	"Si la farola no está apagada, la apaga y propaga la acción."	self isOn		ifTrue: [ estado := false. self propagarApagar  ]! !!Farola methodsFor: 'initialization' stamp: 'LucasDiLorenzo 4/7/2021 20:30'!pairWithNeighbor: otraFarola	"Crea la relación de vecinos entre las farolas. La relación de vecinos entre las farolas es recíproca, es decir el receptor del mensaje será vecino de otraFarola, al igual que otraFarola también se convertirá en vecina del receptor del mensaje."	(vecinos includes: otraFarola )ifTrue: [ ^ self ].	vecinos add: otraFarola.	otraFarola pairWithNeighbor: self! !